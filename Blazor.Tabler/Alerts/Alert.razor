@namespace Blazor.Tabler

<div class="alert @IsImportantClass @AlertTypeClass  @DismissClass" role="alert">
    <div class="d-flex">
        @if (ShowIcon)
        {
            <div>
                @GetAlertIcon()
            </div>
        }
        <div>
            @if (!string.IsNullOrEmpty(Description))
            {
                <h4 class="alert-title">@Title</h4>
                <div class="text-secondary">@Description</div>
            }
            else
            {
                @Title
            }
        </div>
    </div>
    @if (IsDismissible)
    {
        <a class="btn-close" data-bs-dismiss="alert" aria-label="close" @onclick="HandleOnClick"></a>
    }
</div>

@code
{
    [Parameter] public bool IsImportant { get; set; }
    [Parameter] public bool ShowIcon { get; set; }
    [Parameter] public bool IsDismissible { get; set; }
    [Parameter] public required string Title { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public AlertTypes Types { get; set; } = AlertTypes.Success;
    [Parameter] public EventCallback OnDismissed { get; set; }


    private string DismissClass => IsDismissible ? "alert-dismissible" : "";
    private string AlertTypeClass => Types.GetDescription();
    private string IsImportantClass => IsImportant ? "alert-important" : "";


    private RenderFragment GetAlertIcon()
    {
        return Types switch
        {
            AlertTypes.Success => @<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                     <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10"/>
                                 </svg>,
            AlertTypes.Warning => @<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                     <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.24 3.957l-8.422 14.06a1.989 1.989 0 0 0 1.7 2.983h16.845a1.989 1.989 0 0 0 1.7 -2.983l-8.423 -14.06a1.989 1.989 0 0 0 -3.4 0z"/><path d="M12 9v4"/><path d="M12 17h.01"/>
                                 </svg>,
            AlertTypes.Info => @<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                  <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0"/><path d="M12 8v4"/><path d="M12 16h.01"/>
                              </svg>,
            AlertTypes.Danger => @<svg xmlns="http://www.w3.org/2000/svg" class="icon alert-icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0"/><path d="M12 9h.01"/><path d="M11 12h1v4h1"/>
                                </svg>,
            _ => null
        };
    }


    private async Task HandleOnClick()
    {
        await OnDismissed.InvokeAsync();
    }
}